package com.e1i6.notionable.global.config;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.crypto.factory.PasswordEncoderFactories;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;import com.e1i6.notionable.global.auth.JwtAuthenticationFilter;import com.e1i6.notionable.global.auth.JwtProvider;@Configuration@EnableWebSecuritypublic class WebSecurityConfig {	private static final String[] PERMITTED_URLS = {		"/*",		"/login/*",		"/signup",		"/test/*",	};	@Bean	public SecurityFilterChain filterChain(		HttpSecurity http, JwtAuthenticationFilter jwtAuthenticationFilter) throws Exception {		http			.csrf().disable()			.sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS)			.and()			.formLogin().disable()			.addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class)			.authorizeHttpRequests()			.antMatchers(PERMITTED_URLS).permitAll()			.anyRequest().authenticated();		return http.build();	}	@Bean	public JwtAuthenticationFilter jwtAuthenticationFilter(JwtProvider jwtProvider) {		return new JwtAuthenticationFilter(jwtProvider);	}	@Bean	public PasswordEncoder passwordEncoder() {		return PasswordEncoderFactories.createDelegatingPasswordEncoder();	}}