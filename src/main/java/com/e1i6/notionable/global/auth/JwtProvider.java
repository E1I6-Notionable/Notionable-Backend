package com.e1i6.notionable.global.auth;import java.security.Key;import java.util.Date;import org.springframework.beans.factory.annotation.Value;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;import org.springframework.security.core.Authentication;import org.springframework.security.core.userdetails.UserDetails;import org.springframework.security.core.userdetails.UserDetailsService;import org.springframework.stereotype.Component;import io.jsonwebtoken.Claims;import io.jsonwebtoken.ExpiredJwtException;import io.jsonwebtoken.Jwts;import io.jsonwebtoken.MalformedJwtException;import io.jsonwebtoken.SignatureAlgorithm;import io.jsonwebtoken.UnsupportedJwtException;import io.jsonwebtoken.io.Decoders;import io.jsonwebtoken.security.Keys;import lombok.extern.slf4j.Slf4j;@Slf4j@Componentpublic class JwtProvider {	private final Key key;	private final UserDetailsService userDetailsService;	public JwtProvider(@Value("${jwt.secret}") String secretKey,		UserDetailsService userDetailsService) {		byte[] keyBytes = Decoders.BASE64.decode(secretKey);		this.key = Keys.hmacShaKeyFor(keyBytes);		this.userDetailsService = userDetailsService;	}	// 유저 정보를 가지고 AccessToken, RefreshToken 을 생성하는 메서드	public JwtDto generateToken(Long userId) {		final long expiresInMilliseconds = 60 * 60 * 1000; // 1시간		Claims claims = Jwts.claims().setSubject(String.valueOf(userId));		long now = (new Date()).getTime();		// Access Token 생성		Date accessTokenExpiresIn = new Date(now + expiresInMilliseconds);		String accessToken = Jwts.builder()			.setClaims(claims)			.setExpiration(accessTokenExpiresIn)			.signWith(key, SignatureAlgorithm.HS256)			.compact();		// Refresh Token 생성		String refreshToken = Jwts.builder()			.setExpiration(new Date(now + expiresInMilliseconds))			.signWith(key, SignatureAlgorithm.HS256)			.compact();		return JwtDto.builder()			.grantType("Bearer")			.accessToken(accessToken)			.refreshToken(refreshToken)			.expirationDate(new Date(now + expiresInMilliseconds))			.build();	}	// JWT 토큰을 복호화하여 토큰에 들어있는 정보를 꺼내는 메서드	public Authentication getAuthentication(String accessToken) {		// 토큰 복호화		Claims claims = parseClaims(accessToken);		UserDetails userDetails = userDetailsService.loadUserByUsername(claims.getSubject());		return new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());	}	// 토큰 정보를 검증하는 메서드	public boolean validateToken(String token) {		try {			Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token);			return true;		} catch (io.jsonwebtoken.security.SecurityException | MalformedJwtException e) {			log.info("Invalid JWT Token", e);		} catch (ExpiredJwtException e) {			log.info("Expired JWT Token", e);		} catch (UnsupportedJwtException e) {			log.info("Unsupported JWT Token", e);		} catch (IllegalArgumentException e) {			log.info("JWT claims string is empty.", e);		}		return false;	}	private Claims parseClaims(String accessToken) {		try {			return Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(accessToken).getBody();		} catch (ExpiredJwtException e) {			return e.getClaims();		}	}}