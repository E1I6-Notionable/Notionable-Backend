# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

# master 브랜치의 push와 pull로 CI가 작동
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  Setup:
    # Runner 설정
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Reposiotry
      uses: actions/checkout@v3
    
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
    
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

  test:
    needs: Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Reposiotry
        uses: actions/checkout@v3
        
      - name: Test with Gradle
        run: ./gradlew --info test
        
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Reposiotry
        uses: actions/checkout@v3
        
      - run : touch ./src/main/resources/application.properties
      - run : echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
      - run : cat ./src/main/resources/application.properties
      
      # gradlew 빌드
      - name: Build with Gradle
        run: ./gradlew clean build
        
  cd:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Reposiotry
        uses: actions/checkout@v3
        
      - name: Make zip file
        run: zip -r ./$GITHUB_SHA.zip .
        shell: bash

      - name: Setup MySQL
        uses: samin/mysql-action@v1
        with:
          character set server: utf8mb4
          mysql database: db_notionable
          mysql user: "${{ secrets.RDS_ADMIN }}"
          mysql password: "${{ secrets.RDS_PASSWORD }}"
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.S3_IAM_ACCESSKEY }}
          aws-secret-access-key: ${{ secrets.S3_IAM_SECRETKEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        run: aws s3 cp ./$GITHUB_SHA.zip s3://notionable-s3-bucket/$GITHUB_SHA.zip

      - name: Deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.S3_IAM_ACCESSKEY }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.S3_IAM_SECRETKEY }}
        run: |
          aws deploy create-deployment \
          --application-name notionable-codedeploy-app \
          --deployment-group-name my-codedeploy-deployment-group \
          --file-exists-behavior OVERWRITE \
          --s3-location bucket=notionable-s3-bucket,bundleType=zip,key=$GITHUB_SHA.zip \
          --region ${{ secrets.AWS_REGION }}
