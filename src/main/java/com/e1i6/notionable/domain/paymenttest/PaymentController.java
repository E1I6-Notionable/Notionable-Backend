package com.e1i6.notionable.domain.paymenttest;import javax.servlet.http.HttpServletRequest;import org.springframework.security.core.Authentication;import org.springframework.security.core.context.SecurityContextHolder;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import com.e1i6.notionable.domain.paymenttest.dto.PaymentConfirmReqDto;import com.e1i6.notionable.domain.paymenttest.dto.PaymentConfirmResDto;import com.e1i6.notionable.domain.paymenttest.dto.PaymentFailDto;import com.e1i6.notionable.domain.paymenttest.dto.PaymentResultDto;import com.e1i6.notionable.domain.paymenttest.service.PaymentService;import com.e1i6.notionable.global.common.response.BaseResponse;import com.e1i6.notionable.global.common.response.ResponseCode;import com.e1i6.notionable.global.common.response.ResponseException;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;@Slf4j@RestController@RequiredArgsConstructor@RequestMapping(value = "/payment")public class PaymentController {	private final PaymentService paymentService;	// 결제 요청 성공 시 redirected 되는 url	@GetMapping(value = "success")	public BaseResponse<PaymentResultDto> paymentResult(		HttpServletRequest httpServletRequest,		@RequestParam(value = "orderId") String orderId,		@RequestParam(value = "amount") Integer amount,		@RequestParam(value = "paymentKey") String paymentKey) throws Exception {		try {			PaymentResultDto paymentResDto = paymentService.paymentSuccess(orderId, amount, paymentKey);			return new BaseResponse<>(paymentResDto);		} catch (ResponseException e) {			return new BaseResponse<>(e.getErrorCode(), e.getMessage());		} catch (Exception e) {			return new BaseResponse<>(ResponseCode.INTERNAL_SERVER_ERROR, e.getMessage());		}	}	// 결제 요청 실패 시 redirected 되는 url	@GetMapping(value = "fail")	public BaseResponse<PaymentFailDto> paymentResult(		@RequestParam(value = "message") String message,		@RequestParam(value = "code") Integer code) {		return new BaseResponse<PaymentFailDto>(			PaymentFailDto.builder()				.code(code)				.message(message).build()		);	}	// 최종 결제 승인 요청	@PostMapping("/confirm")	public BaseResponse<PaymentConfirmResDto> paymentConfirm(		@RequestBody PaymentConfirmReqDto paymentConfirmReqDto) {		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();		Long userId = Long.parseLong(authentication.getName());		try {			PaymentConfirmResDto paymentConfirmResDto = paymentService.confirmPayment(userId, paymentConfirmReqDto);			return new BaseResponse<>(paymentConfirmResDto);		} catch (ResponseException e) {			return new BaseResponse<>(e.getErrorCode(), e.getMessage());		} catch (Exception e) {			return new BaseResponse<>(ResponseCode.INTERNAL_SERVER_ERROR, e.getMessage());		}	}}