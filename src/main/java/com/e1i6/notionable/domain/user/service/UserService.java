package com.e1i6.notionable.domain.user.service;import java.security.SecureRandom;import java.util.Optional;import com.e1i6.notionable.domain.user.data.dto.request.ChangePasswordReqDto;import com.e1i6.notionable.domain.user.entity.Role;import com.e1i6.notionable.domain.usermailauth.service.MailService;import com.e1i6.notionable.global.common.response.BaseResponse;import okhttp3.Response;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.stereotype.Service;import com.e1i6.notionable.domain.user.data.dto.UserDto;import com.e1i6.notionable.domain.user.data.dto.request.EmailLoginReqDto;import com.e1i6.notionable.domain.user.data.dto.response.EmailLoginResDto;import com.e1i6.notionable.domain.user.entity.User;import com.e1i6.notionable.domain.user.repository.UserRepository;import com.e1i6.notionable.global.auth.JwtProvider;import com.e1i6.notionable.global.common.response.ResponseCode;import com.e1i6.notionable.global.common.response.ResponseException;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.transaction.annotation.Transactional;@Service@Slf4j@RequiredArgsConstructorpublic class UserService {	private final UserRepository userRepository;	private final MailService mailService;	private final PasswordEncoder passwordEncoder;	private final JwtProvider jwtProvider;	private static final String NEW_PASSWORD_CHARS = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";	private static final int NEW_PASSWORD_LENGTH = 12;	public EmailLoginResDto userLoginWithEmail(EmailLoginReqDto emailLoginReqDto) {		String email = emailLoginReqDto.getEmail();		String password = emailLoginReqDto.getPassword();		log.info("email: {}, password: {}", email, password);		Optional<User> userByEmail = userRepository.findUserByEmail(email);		if (userByEmail.isPresent()) {			User user = userByEmail.get();			if (passwordEncoder.matches(password, user.getPassword())) {				return EmailLoginResDto.builder()					.jwtDto(jwtProvider.generateToken(user.getUserId()))					.email(user.getEmail())					.nickName(user.getNickName()).userId(user.getUserId())						.profile(user.getProfile())					.build();			} else {				log.info("email {}: password not matched", user.getEmail());				throw new ResponseException(ResponseCode.WRONG_PASSWORD);			}		} else {			log.info("email {}: no such email", email);			throw new ResponseException(ResponseCode.NOT_FOUND);		}	}	@Transactional	public UserDto signUp(UserDto userDto) {		Optional<User> user = userRepository.findUserByEmail(userDto.getEmail());		if (user.isPresent()) {			throw new ResponseException(ResponseCode.SAME_EMAIL_EXIST);		}		// UserDto로부터 User 엔티티를 생성		User newUser = User.builder()			.email(userDto.getEmail())			.password(passwordEncoder.encode(userDto.getPassword())) // 비밀번호 암호화			.userType(userDto.getUserType())			.role(Role.ROLE_USER)			.nickName(userDto.getNickName())			.profile(userDto.getProfile())			.phoneNumber(userDto.getPhoneNumber())			.build();		// User 엔티티를 저장		User savedUser = userRepository.save(newUser);		// 저장된 User 엔티티로부터 UserDto를 생성하여 반환		return UserDto.toUserDto(savedUser);	}	@Transactional	public String findPassword(String email) {		log.info("email: {}", email);		User user = userRepository.findUserByEmail(email)				.orElseThrow(() -> new ResponseException(ResponseCode.NO_SUCH_USER));		String randomPassword = generateRandomCode();		user.changePassword(passwordEncoder.encode(randomPassword));		try {			mailService.sendPasswordEmail(email, randomPassword);		} catch (Exception e) {			throw new RuntimeException(e);		}		return "success";	}	@Transactional	public String changePassword(Long userId, ChangePasswordReqDto reqDto) {		User user = userRepository.findById(userId)				.orElseThrow(() -> new ResponseException(ResponseCode.NO_SUCH_USER));		String originPassword = reqDto.getOriginPassword();		String newPassword = reqDto.getNewPassword();		if (!passwordEncoder.matches(originPassword, user.getPassword())) {			throw new ResponseException(ResponseCode.WRONG_PASSWORD);		}		user.changePassword(passwordEncoder.encode(newPassword));		return "change password success";	}	private static String generateRandomCode() {		// 랜덤 코드 생성		SecureRandom random = new SecureRandom();		StringBuilder sb = new StringBuilder(NEW_PASSWORD_LENGTH);		for (int i = 0; i < NEW_PASSWORD_LENGTH; i++) {			int randomIndex = random.nextInt(NEW_PASSWORD_CHARS.length());			char randomChar = NEW_PASSWORD_CHARS.charAt(randomIndex);			sb.append(randomChar);		}		return sb.toString();	}}