package com.e1i6.notionable.domain.paymenttest.service;import java.io.InputStream;import java.io.InputStreamReader;import java.io.OutputStream;import java.io.Reader;import java.net.HttpURLConnection;import java.net.URL;import java.nio.charset.StandardCharsets;import java.util.Base64;import com.e1i6.notionable.domain.paymenttest.entity.Payment;import org.json.simple.JSONObject;import org.json.simple.parser.JSONParser;import org.springframework.beans.factory.annotation.Value;import org.springframework.stereotype.Service;import com.e1i6.notionable.domain.paymenttest.dto.PaymentConfirmDto;import com.e1i6.notionable.domain.paymenttest.repository.PaymentRepository;import com.e1i6.notionable.global.common.response.ResponseCode;import com.e1i6.notionable.global.common.response.ResponseException;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.transaction.annotation.Transactional;@Slf4j@Service@RequiredArgsConstructorpublic class PaymentService {	@Value("${payments.toss.test_secret_api_key}")	private String secretKey;	private final PaymentRepository paymentRepository;	@Transactional	public PaymentConfirmDto paymentSuccess(Long userId, String orderId, Integer amount, String paymentKey) throws Exception {		// 토스페이먼츠에서 Basic 인증 방식 사용을 위해 뒤 문자열에 : 추가		// {USERNAME}:{PASSWORD} 방식. 비밀번호는 따로 넣지 않음		// API 요청 authorization 헤더에 추가		secretKey = secretKey + ":";		Base64.Encoder encoder = Base64.getEncoder();		byte[] encodedBytes = encoder.encode(secretKey.getBytes("UTF-8"));		String authorizations = "Basic " + new String(encodedBytes, 0, encodedBytes.length);		URL url = new URL("https://api.tosspayments.com/v1/payments/" + paymentKey);		// header, body		HttpURLConnection connection = (HttpURLConnection)url.openConnection();		connection.setRequestProperty("Authorization", authorizations);		connection.setRequestProperty("Content-Type", "application/json");		connection.setRequestMethod("POST");		connection.setDoOutput(true);		JSONObject obj = new JSONObject();		obj.put("orderId", orderId);		obj.put("amount", amount);		// POST request		OutputStream outputStream = connection.getOutputStream();		outputStream.write(obj.toString().getBytes("UTF-8"));		int code = connection.getResponseCode();		boolean isSuccess = code == 200 ? true : false;		InputStream responseStream = isSuccess ? connection.getInputStream() : connection.getErrorStream();		Reader reader = new InputStreamReader(responseStream, StandardCharsets.UTF_8);		JSONParser parser = new JSONParser();		JSONObject jsonObject = (JSONObject)parser.parse(reader);		responseStream.close();		String method = (String)jsonObject.get("method");		if (method != null) {			log.info("not null");			Payment payment = Payment.builder()					.paymentKey((String)jsonObject.get("paymentKey"))					.buyerId(userId)					.price(((Integer)jsonObject.get("balanceAmount")))					.approvedAt((String)jsonObject.get("approvedAt"))					.build();			paymentRepository.save(payment);			return payment.toDto();		} else {			log.info("is null");			String errorCode = (String)jsonObject.get("code");			String errorMessage = (String)jsonObject.get("message");			log.error("tosspayments errorCode: {}", errorCode);			log.error("tosspayments error: {}", errorMessage);			throw new ResponseException(ResponseCode.PAYMENT_ERROR);		}	}}